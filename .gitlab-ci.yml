variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CLIENT_TIMEOUT: 600
  COMPOSE_HTTP_TIMEOUT: 600    
  COMPOSE_DOCKER_CLI_BUILD: 0    
  LOCALHOST_SONAR_IP: http://10.44.0.11:9000
  SONAR_TOKEN: sqp_0bbd82657588ca0f1aa582d3691c0a4a3e2ed4e7
  APP_IP: http://localhost:5000
  IMAGE_NAME: todo_app_img

stages:
  - test
  - security
  - review
  - staging
  - scan_dast
  - deploy 
  - monitoring

test_job:
  stage: test
  image: python:3.9  
  script:
    - echo "Testing the app"
    - pip install pytest pytest-cov  
    - pip install -r requirements.txt
    - mkdir -p coverage  
    - export SQLALCHEMY_DATABASE_URI=sqlite:///site.db
    - export SECRET_KEY=$SECRET_KEY
    - pytest --cov=. --cov-report=term --cov-report=xml:coverage/coverage.xml  
    - pwd
    - ls -la coverage  
    - cat coverage/coverage.xml  

dependency_check:
   stage: security
   image:
    name: owasp/dependency-check
    entrypoint: [""]
   script:
      - echo "Iniciando análise de dependência"
      - /usr/share/dependency-check/bin/dependency-check.sh --project "Task"  --scan . --format "HTML" --out ./dependency-check-report.html
   artifacts:
      paths:
        - dependency-check-report.htm

bandit-sast:
  stage: security
  image: python:3.9
  script:
    - pip install bandit
    - bandit --version
    - bandit -r . --format json --output result-bandit.json
  allow_failure: true

code_analysis:
  stage: security
  image: sonarsource/sonar-scanner-cli:latest
  script:
   - sonar-scanner -Dsonar.projectKey=Task-Manager-using-Flask -Dsonar.sources=. -Dsonar.host.url=http://10.44.0.11:9000 -Dsonar.token=$SONAR_TOKEN -Dsonar.python.coverage.reportPaths=coverage/coverage.xml -Dsonar.dependencyCheck.htmlReportPath=dependency-check-report.html

security_scan:
  stage: security
  image: docker:stable
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - apk add --no-cache curl
    - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
  script:
    - docker build -t ex-build-dev:latest .
    - trivy image --severity HIGH,CRITICAL ex-build-dev:latest
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - /root/.cache/trivy

stage_deploy:
  stage: staging
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:dind
  script:
    - echo "Deploying to stage environment"
    - docker build -t $IMAGE_NAME .
    - docker run --name todo_list_app --network host -d -p 5000:5000 $IMAGE_NAME
  environment:
    name: staging
    url: http://localhost:5000

scan:
  image: "registry.gitlab.com/gitlab-org/security-products/dast:2.0.0"
  stage: scan_dast
  dependencies:
    - stage_deploy
  variables:
    DAST_WEBSITE: $APP_IP
    DAST_TIMEOUT: "10m"
  script:
    - echo "DAST Website:1 $APP_IP"
    #- curl -I $DAST_WEBSITE
    - /analyze 

deploy_job:
   stage: deploy
   image: docker:latest
   variables:
      DOCKER_HOST: tcp://docker:2375
      DOCKER_TLS_CERTDIR: ""
   services:
      - docker:dind
   before_script:        
        - echo "Remove anterior"
        - PORT_CONTAINERS=$(docker ps --filter "publish=5000" -q)
        - echo $PORT_CONTAINERS
        - if [ -n "$PORT_CONTAINERS" ]; then
            docker stop $PORT_CONTAINERS;
            docker rm $PORT_CONTAINERS;
            sleep 5; 
          fi
   script:
     - docker build -t ex-build-dev:latest .
     - echo "Deploying the app"
     - docker compose up -d

monitoring_setup:
  stage: monitoring
  image: docker:latest
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  dependencies:
    - deploy_job
  services:
    - docker:dind
  script:
    # Elastic Stack (ELK)
    - echo "Instalando e configurando ELK"
    - docker pull docker.elastic.co/elasticsearch/elasticsearch:7.10.1
    - docker pull docker.elastic.co/kibana/kibana:7.10.1
    - docker pull docker.elastic.co/beats/filebeat:7.10.1

    #  Elasticsearch
    - docker run -d --name elasticsearch -p 9200:9200 -e "discovery.type=single-node" docker.elastic.co/elasticsearch/elasticsearch:7.10.1
    #  Kibana
    - docker run -d --name kibana --link elasticsearch:elasticsearch -p 5601:5601 docker.elastic.co/kibana/kibana:7.10.1

    # Instalar e configurar o Filebeat para monitorar logs da aplicação
    - echo "Configurando Filebeat"
    - |
      docker run -d --name filebeat --user=root --volume="$(pwd)/filebeat.yml:/usr/share/filebeat/filebeat.yml" \
        --volume="/var/log:/var/log" docker.elastic.co/beats/filebeat:7.10.1

    # Instalar e configurar Prometheus e Grafana
    - echo "Instalando e configurando Prometheus e Grafana"
    - docker pull prom/prometheus
    - docker pull grafana/grafana:latest
    - docker run -d --name prometheus -p 9090:9090 prom/prometheus
    - docker run -d --name grafana -p 3000:3000 grafana/grafana

    # Configurar alertas no Prometheus
    - echo "Configurando alertas no Prometheus"
    - |
      echo "alerting rules:" > alert.rules.yml
      echo "groups:" >> alert.rules.yml
      echo "  - name: ExampleAlert" >> alert.rules.yml
      echo "    rules:" >> alert.rules.yml
      echo "    - alert: HighErrorRate" >> alert.rules.yml
      echo "      expr: job:request_errors:rate5m > 0.05" >> alert.rules.yml
      echo "      for: 5m" >> alert.rules.yml
      echo "      labels:" >> alert.rules.yml
      echo "        severity: warning" >> alert.rules.yml
      echo "      annotations:" >> alert.rules.yml
      echo "        summary: High error rate" >> alert.rules.yml

    # Adicionar monitoramento e alertas no Grafana
    - echo "Adicionando alertas no Grafana"
    - docker exec grafana grafana-cli plugins install grafana-simple-json-datasource
    - docker restart grafana