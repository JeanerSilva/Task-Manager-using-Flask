stages:
  - build
  - test
  - security_scan
  - review
  - deploy

# Stage 1: Build
build:
  stage: build
  script:
    - echo "Building the application..."
    - python -m venv venv
    - source venv/bin/activate
    - pip install -r requirements.txt
  artifacts:
    paths:
      - venv/
  only:
    - main
    - develop

# Stage 2: Test
unit_tests:
  stage: test
  script:
    - echo "Running unit tests..."
    - source venv/bin/activate
    - pytest --junit-xml=report.xml
  artifacts:
    reports:
      junit: report.xml
  only:
    - main
    - develop

# Stage 3: Static Security Scan (SAST)
sast_scan:
  stage: security_scan
  script:
    - echo "Running Bandit for static analysis..."
    - bandit -r . -f html -o bandit-report.html
  artifacts:
    paths:
      - bandit-report.html
  only:
    - main
    - develop

# Stage 4: Dependency Check
dependency_check:
  stage: security_scan
  script:
    - echo "Running OWASP Dependency-Check..."
    - dependency-check --project TaskManager --out dependency-report
  artifacts:
    paths:
      - dependency-report/
  only:
    - main
    - develop

# Stage 5: Start Application in Docker for DAST
start_application:
  stage: security_scan
  script:
    - echo "Starting application in Docker for DAST..."
    - docker-compose up -d
    - sleep 10 # Aguarda a aplicação estar em execução
  only:
    - main
    - develop

# Stage 6: Dynamic Security Scan (DAST) using OWASP ZAP
dast_scan:
  stage: security_scan
  script:
    - echo "Running OWASP ZAP for dynamic security analysis..."
    - docker run -t owasp/zap2docker-stable zap-baseline.py -t http://localhost:5000 -r zap-report.html
  artifacts:
    paths:
      - zap-report.html
  only:
    - main
    - develop

# Stage 7: Review (Temporary Review Environment)
review:
  stage: review
  script:
    - echo "Setting up a temporary review environment..."
    - docker-compose up -d
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://$CI_COMMIT_REF_NAME.example.com
  only:
    - merge_requests

# Stage 8: Deploy to Staging
deploy_staging:
  stage: deploy
  script:
    - echo "Deploying to the staging environment..."
    - docker-compose -f docker-compose.stage.yml up -d
  environment:
    name: staging
    url: http://staging.example.com
  only:
    - main

# Stage 9: Continuous Delivery (Deploy to Production)
deploy_production:
  stage: deploy
  script:
    - echo "Deploying to production..."
    - docker-compose -f docker-compose.prod.yml up -d
  environment:
    name: production
    url: http://example.com
  only:
    - tags
