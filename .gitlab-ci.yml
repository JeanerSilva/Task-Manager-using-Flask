variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  DOCKER_CLIENT_TIMEOUT: 600
  COMPOSE_HTTP_TIMEOUT: 600    
  COMPOSE_DOCKER_CLI_BUILD: 0    
  LOCALHOST_SONAR_IP: http://localhost:9000
  APP_IP: http://localhost:5000

stages:
  - test
  - security
  - review
  - staging
  - scan
  - deploy 
  - monitoring
  - notify

#test_job:
#  stage: test
#  image: python:3.9  
#  script:
#    - echo "Testing the app"
#    - pip install pytest pytest-cov  
#    - pip install -r requirements.txt
#    - mkdir -p coverage  
#    - export SQLALCHEMY_DATABASE_URI=sqlite:///site.db
#    - export SECRET_KEY=45cf93c4d41348cd9980674ade9a7356
#    - pytest --cov=. --cov-report=term --cov-report=xml:coverage/coverage.xml  
#    - pwd
#    - ls -la coverage  
#    - cat coverage/coverage.xml  
#  artifacts:
#    paths:
#      - coverage/coverage.xml  
#    expire_in: 1 week  

#dependency_check:
#   stage: security
#   image: owasp/dependency-check
#   script:      
#      - echo "Verificando dependencias"
#      - pwd 
#      - ls -la 
#      - Dependency-Check Core --project "Task-Manager-using-Flask" --scan . --format "HTML" --out dependency-check-report.html
#      - cat dependency-check-report.html
#      - sonar-scanner -Dsonar.dependencyCheck.htmlReportPath=dependency-check-report.html

#bandit-sast:
#  stage: security
#  image: python:3.9
#  script:
#    - pip install bandit
#    - bandit --version
#    - bandit -r . --format json --output result-bandit.json
#  allow_failure: true
#  artifacts:
#    reports:
#      sast: result-bandit.json


code_analysis:
  stage: security
  image: sonarsource/sonar-scanner-cli:latest
   #dependencies:
   #  - test_job  
  script:
   - sonar-scanner \
    -Dsonar.projectKey=Task-Manager-using-Flask -Dsonar.sources=. -Dsonar.host.url=$LOCALHOST_SONAR_IP -Dsonar.token=sqb_4f06a8a9b373267461b8011ad9ac1ec4ed28f20b -Dsonar.python.coverage.reportPaths=coverage.xml -Dsonar.dependencyCheck.htmlReportPath=dependency-check-report.html -Dsonar.dependencyCheck.xmlReportPath=dependency-check-report.xml -Dsonar.language=py  -Dsonar.dependencyCheck.jsonReportPath=dependency-check-report.json
   - cat coverage/coverage.xml
   - if [ -f coverage/coverage.xml]; then cat coverage/coverage.xml; else echo "coverage/coverage.xml não encontrado"; fi
   - sonar-scanner -D sonar.go.coverage.reportPaths=coverage/coverage.xml

security_scan:
  stage: security
  image: docker:stable
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  before_script:
    - apk add --no-cache curl
    - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
  script:
    - docker build -t ex-build-dev:latest .
    - trivy image --severity HIGH,CRITICAL ex-build-dev:latest
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - /root/.cache/trivy
  only:
    - master

review_job:
  stage: review
  script:
    - echo "Deploying review environment"
    - docker build -t review-environment .
    - docker run -d -p 5000:5000 review-environment
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://$CI_ENVIRONMENT_SLUG.$APP_IP
  only:
    - merge_requests
  artifacts:
    paths:
      - review_report.html
    expire_in: 1 week

stage_deploy:
  stage: staging
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:dind
  script:
    - echo "Deploying to stage environment"
    - docker build -t ex-build-dev:latest .
    - echo "Deploying the app"
    - docker run --name todo_list_app -d -p 5000:5000 ex-build-dev:latest
  environment:
    name: stage
    url: http://$APP_IP
  only:
    - master
  when: manual
  artifacts:
    paths:
      - stage_report.html
    expire_in: 1 week

scan:
  image: "registry.gitlab.com/gitlab-org/security-products/dast:latest"
  stage: scan
  variables:
    DAST_WEBSITE: "https://sua-aplicacao.com"
  script:
    - /analyze
  artifacts:
    reports:
      dast: gl-dast-report.json

deploy_job:
   stage: deploy
   image: docker:latest
   services:
    - name: docker:dind
      command: ["--tls=false"]

   before_script:        
        - echo "Remove anterior"
        - PORT_CONTAINERS=$(docker ps --filter "publish=5000" -q)
        - echo $PORT_CONTAINERS
        - if [ -n "$PORT_CONTAINERS" ]; then
            docker stop $PORT_CONTAINERS;
            docker rm $PORT_CONTAINERS;
            sleep 5; 
          fi
   
   script:
     - docker build -t ex-build-dev:latest .
     - echo "Deploying the app"
     - docker compose up --build -d
monitoring_setup:
  stage: monitoring
  image: docker:latest
  services:
    - docker:dind
  script:
    # Instalar e configurar Elastic Stack (ELK)
    - echo "Instalando e configurando ELK"
    - docker pull docker.elastic.co/elasticsearch/elasticsearch:7.10.1
    - docker pull docker.elastic.co/kibana/kibana:7.10.1
    - docker pull docker.elastic.co/beats/filebeat:7.10.1

    # Executar Elasticsearch
    - docker run -d --name elasticsearch -p 9200:9200 -e "discovery.type=single-node" docker.elastic.co/elasticsearch/elasticsearch:7.10.1

    # Executar Kibana
    - docker run -d --name kibana --link elasticsearch:elasticsearch -p 5601:5601 docker.elastic.co/kibana/kibana:7.10.1

    # Instalar e configurar o Filebeat para monitorar logs da aplicação
    - echo "Configurando Filebeat"
    - |
      docker run -d --name filebeat --user=root --volume="$(pwd)/filebeat.yml:/usr/share/filebeat/filebeat.yml" \
        --volume="/var/log:/var/log" docker.elastic.co/beats/filebeat:7.10.1

    # Instalar e configurar Prometheus e Grafana
    - echo "Instalando e configurando Prometheus e Grafana"
    - docker pull prom/prometheus
    - docker pull grafana/grafana:latest

    # Executar Prometheus
    - docker run -d --name prometheus -p 9090:9090 prom/prometheus

    # Executar Grafana
    - docker run -d --name grafana -p 3000:3000 grafana/grafana

    # Configurar alertas no Prometheus
    - echo "Configurando alertas no Prometheus"
    - |
      echo "alerting rules:" > alert.rules.yml
      echo "groups:" >> alert.rules.yml
      echo "  - name: ExampleAlert" >> alert.rules.yml
      echo "    rules:" >> alert.rules.yml
      echo "    - alert: HighErrorRate" >> alert.rules.yml
      echo "      expr: job:request_errors:rate5m > 0.05" >> alert.rules.yml
      echo "      for: 5m" >> alert.rules.yml
      echo "      labels:" >> alert.rules.yml
      echo "        severity: warning" >> alert.rules.yml
      echo "      annotations:" >> alert.rules.yml
      echo "        summary: High error rate" >> alert.rules.yml

    # Adicionar monitoramento e alertas no Grafana
    - echo "Adicionando alertas no Grafana"
    - docker exec grafana grafana-cli plugins install grafana-simple-json-datasource
    - docker restart grafana

  environment:
    name: production
    url: http://$APP_IP
  only:
    - master