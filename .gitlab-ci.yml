variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  DOCKER_CLIENT_TIMEOUT: 600
  COMPOSE_HTTP_TIMEOUT: 600    
  DOCKER_BUILDKIT: 0
  COMPOSE_DOCKER_CLI_BUILD: 0    

stages:
  - build
  - security
  - deploy
  - notify
  - security2

dependency_check:
   stage: security2
   image: owasp/dependency-check
   script:      
      - echo "Verificando dependencias"
      - pwd 
      - ls -la 
      - Dependency-Check Core --project "Task-Manager-using-Flask" --scan . --format "HTML" --out dependency-check-report.html
      - cat dependency-check-report.html
      - sonar-scanner -Dsonar.dependencyCheck.htmlReportPath=dependency-check-report.html

bandit-sast:
  stage: security2
  image: python:3.9
  script:
    - pip install bandit
    - bandit --version
    - bandit -r .
  allow_failure: true
  artifacts:
    reports:
      sast: result-bandit.json


code_analysis:
    stage: security
    image: sonarsource/sonar-scanner-cli:latest
    script:
      - ifconfig
      - LOCALHOST_IP=$(hostname --all-ip-addresses | awk '{print $1}')
      - sonar-scanner   -Dsonar.projectKey=Task-Manager-using-Flask   -Dsonar.sources=.   -Dsonar.host.url=http://$LOCALHOST_IP:9000   -Dsonar.token=sqp_add80868ce022027164bfcc8e682351b6a2a3ead -Dsonar.py.coverage.reportPaths=coverage.out
      - cat coverage.out
      - if [ -f coverage.out ]; then cat coverage.out; else echo "coverage.out não encontrado"; fi
      - sonar-scanner -D sonar.go.coverage.reportPaths=coverage.out

security_scan:
  stage: security2
  image: docker:stable
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  before_script:
    - apk add --no-cache curl
    - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
  script:
    - trivy image --severity HIGH,CRITICAL reserva-salas
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - /root/.cache/trivy
  only:
    - master

deploy_job:
   stage: deploy
   image: docker:latest

   services:
    - name: docker:dind
      command: ["--tls=false"] # Desativar TLS, se não necessário

   before_script:        
        - echo "Remove anterior"
        - PORT_CONTAINERS=$(docker ps --filter "publish=5000" -q)
        - echo $PORT_CONTAINERS
        - if [ -n "$PORT_CONTAINERS" ]; then
            docker stop $PORT_CONTAINERS;
            docker rm $PORT_CONTAINERS;
            sleep 5; 
          fi
   
   script:
     - docker build -t ex-build-dev:latest .
     - echo "Deploying the app"
     - docker run -d -p 5000:5000 ex-build-dev:latest

